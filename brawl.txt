
<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width,initial-scale=1,user-scalable=no">
<title>Brawl Stars Lite</title>
<style>
  html,body { margin:0; background:#1a1d22; color:white; height:100%; overflow:hidden; }
  canvas { display:block; width:100%; height:100%; touch-action:none; }
  #msg { position:absolute; left:50%; top:50%; transform:translate(-50%,-50%);
         text-align:center; background:rgba(0,0,0,.6); padding:20px; border-radius:10px; }
  #msg.hidden { display:none }
  button { font-size:16px; padding:10px 20px; margin:6px; border-radius:8px; border:none; }
</style>
</head>
<body>
<canvas id="game"></canvas>
<div id="msg">
  <h2>BRAWLERS</h2>
  <p>Select your brawler:</p>
  <div id="buttons"></div>
</div>
<script>
(() => {
const canvas=document.getElementById('game');
const ctx=canvas.getContext('2d');
canvas.width=window.innerWidth;
canvas.height=window.innerHeight;

// --- Joystick system ---
class Joystick {
  constructor(r){ this.r=r; this.baseX=0; this.baseY=0; this.touchId=null; this.dx=0; this.dy=0; }
  start(t){ if(this.touchId===null){this.touchId=t.identifier; this.baseX=t.clientX; this.baseY=t.clientY; return true;} return false; }
  move(t){ if(t.identifier!==this.touchId) return;
    let dx=t.clientX-this.baseX, dy=t.clientY-this.baseY;
    let d=Math.hypot(dx,dy); if(d>this.r){dx=dx/d*this.r; dy=dy/d*this.r;}
    this.dx=dx/this.r; this.dy=dy/this.r;
  }
  end(t){ if(t.identifier===this.touchId){this.touchId=null; this.dx=0; this.dy=0;} }
  draw(){ if(this.touchId!==null){ ctx.strokeStyle='rgba(255,255,255,.5)'; ctx.lineWidth=2;
    ctx.beginPath(); ctx.arc(this.baseX,this.baseY,this.r,0,Math.PI*2); ctx.stroke();
    ctx.beginPath(); ctx.arc(this.baseX+this.dx*this.r,this.baseY+this.dy*this.r,20,0,Math.PI*2);
    ctx.fillStyle='rgba(255,255,255,.4)'; ctx.fill(); } }
}
const leftJoy=new Joystick(60), rightJoy=new Joystick(60);

canvas.addEventListener('touchstart',e=>{
  for(const t of e.changedTouches){
    if(t.clientX<canvas.width/2) leftJoy.start(t); else rightJoy.start(t);
  }
});
canvas.addEventListener('touchmove',e=>{
  for(const t of e.changedTouches){ leftJoy.move(t); rightJoy.move(t); }
});
canvas.addEventListener('touchend',e=>{
  for(const t of e.changedTouches){ leftJoy.end(t); rightJoy.end(t); }
});

// --- Entities ---
function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
class Bullet{ constructor(x,y,vx,vy,dmg){this.x=x;this.y=y;this.vx=vx;this.vy=vy;this.r=5;this.dmg=dmg;this.life=1.2;this.dead=false;} 
  update(dt){this.x+=this.vx*dt; this.y+=this.vy*dt; this.life-=dt; if(this.life<=0) this.dead=true;
    enemies.forEach(e=>{ if(!e.dead && Math.hypot(this.x-e.x,this.y-e.y)<this.r+e.r){ e.hp-=this.dmg; this.dead=true; }});}
  draw(){ctx.fillStyle="#fff"; ctx.beginPath(); ctx.arc(this.x,this.y,this.r,0,Math.PI*2); ctx.fill();}
}
class Enemy{ constructor(x,y){this.x=x;this.y=y;this.r=18;this.c="#f55";this.hp=50;this.dead=false;}
  update(dt){const dx=player.x-this.x,dy=player.y-this.y; const d=Math.hypot(dx,dy)||1;
    this.x+=dx/d*60*dt; this.y+=dy/d*60*dt;
    if(d<player.r+this.r){player.hp-=20*dt;}
    if(this.hp<=0) this.dead=true;}
  draw(){ctx.fillStyle=this.c; ctx.beginPath(); ctx.arc(this.x,this.y,this.r,0,Math.PI*2); ctx.fill();}
}

// --- Brawlers ---
const brawlers={
  "Shelly":{hp:120,speed:220,damage:20,reload:0.4,color:"#4ec9b0"},
  "Bull":{hp:200,speed:160,damage:40,reload:0.8,color:"#8855ff"},
  "Colt":{hp:90,speed:260,damage:14,reload:0.25,color:"#ffcc55"}
};

let player,enemies=[],bullets=[],lastShot=0,chosen=null;
function startGame(name){
  const b=brawlers[name]; chosen=name;
  player={x:canvas.width/2,y:canvas.height/2,r:20,c:b.color,hp:b.hp,maxHp:b.hp,
          speed:b.speed,damage:b.damage,reload:b.reload};
  enemies=[]; bullets=[];
  for(let i=0;i<8;i++) enemies.push(new Enemy(Math.random()*canvas.width,Math.random()*canvas.height));
  lastShot=0;
  document.getElementById('msg').classList.add('hidden');
}

// --- Game Loop ---
let last=performance.now();
function loop(){
  const t=performance.now(), dt=(t-last)/1000; last=t;
  ctx.clearRect(0,0,canvas.width,canvas.height);
  if(player){
    // movement
    player.x+=leftJoy.dx*player.speed*dt; player.y+=leftJoy.dy*player.speed*dt;
    player.x=clamp(player.x,20,canvas.width-20); player.y=clamp(player.y,20,canvas.height-20);
    // shooting
    if((rightJoy.dx||rightJoy.dy) && t-lastShot>player.reload*1000){
      const ang=Math.atan2(rightJoy.dy,rightJoy.dx);
      bullets.push(new Bullet(player.x,player.y,Math.cos(ang)*500,Math.sin(ang)*500,player.damage));
      lastShot=t;
    }
    bullets.forEach(b=>b.update(dt));
    enemies.forEach(e=>e.update(dt));
    bullets=bullets.filter(b=>!b.dead);
    enemies=enemies.filter(e=>!e.dead);
    // draw
    enemies.forEach(e=>e.draw()); bullets.forEach(b=>b.draw());
    ctx.fillStyle=player.c; ctx.beginPath(); ctx.arc(player.x,player.y,player.r,0,Math.PI*2); ctx.fill();
    // hp bar
    ctx.fillStyle='red'; ctx.fillRect(20,20,200,16);
    ctx.fillStyle='lime'; ctx.fillRect(20,20,200*(player.hp/player.maxHp),16);
    leftJoy.draw(); rightJoy.draw();
    if(player.hp<=0){ chosen=null; document.getElementById('msg').classList.remove('hidden'); }
  }
  requestAnimationFrame(loop);
}
loop();

// --- Brawler buttons ---
const btns=document.getElementById('buttons');
Object.keys(brawlers).forEach(name=>{
  const b=document.createElement('button'); b.textContent=name;
  b.onclick=()=>startGame(name); btns.appendChild(b);
});
})();
</script>
</body>
</html>